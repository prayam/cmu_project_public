06/23
V01) insert a arbitrary id/password to DB
	Compromise Sequence
	1. we recognized the sqlite3 DB is used by checking the install guide.
	2. And we found the DB file and we could see the contents of the user DB.
	3. it consists of the user id and the hashed value of password.
	4. So we looked into the source code and we found the logic of how to make the hashed value of password.
	5. So we changed the password of the 'admin' in DB to what we generated.
	6. Finally we could do the login with 'admin' id with the generated password.
	
	Vulnerabilities
	1. sqlite3 database files(./tartan_faces.db, ./tartan_user.db) have no password
	2. the root key for the encryption of credentials is stored in the ./shinpark/secret.key
	
06/24
V02) sniffing the id/password
	Compromise Sequence
	1. sniffing the network packet through Wireshark.
	2. select the 'Non secure' mode and push login button
	3. the id/password is checked by captured packet

	Vulnerabilities
	1. the communication channel for the user credentials is not secure
